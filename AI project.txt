#include <math.h>
#define xPin A1
#define yPin A2
#define zPin A3
byte updateflag;
int xaxis = 0, yaxis = 0, zaxis = 0;
int deltx = 0, delty = 0, deltz = 0;
int vibration = 0, magnitude = 0, sensitivity = 45, devibrate =
75;
double angle;
//Used to run impact routine every 2mS.
unsigned long time1;
void setup()
{
Serial.begin(9600);
time1 = micros();
Serial.print("time1 = ");
Serial.println(time1);
}
void loop()
{
//call impact routine every 2mS
if (micros() - time1 > 1999)
Impact();
if(updateflag > 0)
{
updateflag=0;
Serial.print("Impact detected!!");
Serial.print("Magnitude:");
Serial.print(magnitude);
Serial.print("\t Angle:");
Serial.print(angle, 2);
Serial.print("\t Car Direction: NaN");
Serial.println();
}
FIG 5.1.1 : Reporting system for Once the accident is
detected, a message is sent to the emergency number
30
}
void Impact()
{
//Calibration testing. Accelerometer is calibrated correctly x
~0 y ~0 z ~9.8
Serial.print("X: ");
Serial.print("event.acceleration.x");
Serial.print(" ");
Serial.print("Y: ");
Serial.print("event.acceleration.y");
Serial.print(" ");
Serial.print("Z: ");
Serial.print("event.acceleration.z");
Serial.print(" ");
Serial.println("m/s^2 ");
time1 = micros(); // resets time value
int oldx = xaxis; //store previous axis readings for
comparison
int oldy = yaxis;
int oldz = zaxis;
Serial.print("current time = ");
Serial.print(micros());
Serial.print("\toldx = ");
Serial.print(oldx);
Serial.print("\toldy = ");
Serial.print(oldy);
Serial.print("\toldz = ");
Serial.println(oldz);
vibration--; // loop counter prevents false triggering.
Vibration resets if there is an impact. Don't detect new
changes until that "time" has passed.
Serial.print("Vibration = ");
Serial.println(vibration);
if(vibration < 0) vibration = 0;
Serial.println("Vibration R eset!");
Serial.println("**********");
xaxis = analogRead(xPin);
yaxis = analogRead(yPin);
zaxis = analogRead(zPin);
31
Serial.print("current time = ");
Serial.print(micros());
Serial.print("\txaxis = ");
Serial.print(xaxis);
Serial.print("\tyaxis = ");
Serial.print(yaxis);
Serial.print("\tzaxis = ");
Serial.println(zaxis);
Serial.println("**********");
deltx = xaxis - oldx;
delty = yaxis - oldy;
deltz = zaxis - oldz;
//Magnitude to calculate force of impact.
magnitude = sqrt(sq(deltx) + sq(delty) + sq(deltz));
if (magnitude >= sensitivity) //impact detected
{
//Values that caused the impact
Serial.print("Impact Time = "); Serial.print(micros());
Serial.print("\t\tCar Direction = ");
Serial.print("oldx = "); Serial.print(oldx);
Serial.print("\toldy = "); Serial.print(oldy);
Serial.print("\toldz = "); Serial.println(oldz);
Serial.print("xaxis = "); Serial.print(xaxis);
Serial.print("\tyaxis = "); Serial.print(yaxis);
Serial.print("\tzaxis = "); Serial.println(zaxis);
Serial.print("Mag = "); Serial.print(magnitude);
Serial.print("\tdeltx = "); Serial.print(deltx);
Serial.print("\tdelty = "); Serial.print(delty);
Serial.print("\tdeltz = "); Serial.println(deltz);
updateflag=1;
//impact Direction = getHeading(msgEvent);
double X = xaxis - 512;
double Y = yaxis - 512;
//double X = acos((double) deltx / magnitude);
//double Y = acos((double) delty / magnitude);
Serial.print("X = "); Serial.print(X); Serial.print("Y =
32
"); Serial.println(Y);
Serial.println("**********");
angle = (atan2(Y,X) * 180)/PI; // use atan2 to calculate
angle and convert radians to degrees
angle += 180;
void goleft() {
digitalWrite(13, HIGH);
digitalWrite(enginea1, HIGH);
digitalWrite(enginea2, LOW);
digitalWrite(engineb1, LOW);
digitalWrite(engineb2, HIGH);
delay(1000);
allstop();}
void setup1() {
Serial.begin(9600);
Serial.println("Priya");
pinMode(25, OUTPUT);
pinMode(enginea1, OUTPUT);
pinMode(enginea2, OUTPUT);
pinMode(engineb1, OUTPUT);
pinMode(engineb2, OUTPUT);}
void loop2() {
while (Serial.available()) { //Check if there is an
available byte to read
delay(10); //Delay added to make thing stable
char c = Serial.read(); //Conduct a serial read
if (c == '#') {
break; //Exit the loop when the # is detected
after the word }
voice += c; }
if (voice.length() > 0) {
Serial.println(voice);
//----------Control Multiple Pins/ LEDs----------//
if (voice == "*stop") {
allstop(); //Turn Off All Pins (Call Function) }
else if (voice == "*all off") {
allstop(); //Turn On All Pins (Call Function }
//----------Turn On One
-By
-One----------//
33
else if (voice == "*accidentdetected") {
accidentdetected(); }
else if (voice == "*goforward") {
goforward(); }
else if (voice == "*gobackward") {
gobackward(); }
else if (voice == "*goright") {
goright(); }
else if (voice == "*goleft") {
goleft(); }
//----------------------------------------------------------------
-------//
voice = "" }
Serial.println("accidentdetected");
} //Reset the variable after initiating